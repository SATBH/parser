#![allow(unused)]
mod parser {
    use std::convert::TryInto;

    type Parser<T> = Box<dyn Fn(&str) -> Option<(T, &str)>>;

    type Consumer  = Box<dyn Fn(&str) -> &str>;

    #[derive(Debug)]
    pub enum Expr {
        Symbol(String),
        List(Vec<Expr>),
    }

    use Expr::*;
    struct IterParse<'a, T> {
        parser: Parser<T>,
        s: &'a str,
    }

    impl<'a, T> Iterator for IterParse<'a, T> {
        type Item = (T, &'a str);

        fn next(&mut self) -> Option<(T, &'a str)> {
            let (expr, tail) = (self.parser)(self.s)?;
            self.s = tail;
            Some((expr, tail))
        }
    }

    fn parse_consume<T:'static>(parser: Parser<T>, consumer:Consumer) -> Parser<T> {
        Box::new(
            move |s: &str| {
                let (result, tail) = parser(s)?;
                Some((result, consumer(tail)))
            }
        )
    }

    fn parse_iter<T>(parser: Parser<T>, s: &str) -> IterParse<T> {
        IterParse { parser, s }
    }

    fn parse_multiple<T>(parser: Parser<T>, s: &str) -> Option<(Vec<T>, &str)> {
        let (expr, tail) =
            parse_iter(parser, s).fold((Vec::new(), s), |mut acc, (parsed, tail)| {
                acc.0.push(parsed);
                (acc.0, tail)
            });

        if tail == s {
            return None;
        }

        Some((expr, tail))
    }

    fn char_parser(fun: &'static dyn Fn(char) -> bool) -> Parser<char> {
        Box::new(move |s| {
            let c = s.chars().next()?;
            if fun(c) {
                None
            } else {
                Some((c, &s[c.len_utf8()..]))
            }
        })
    }

    fn symbol_character(s: &str) -> Option<(char, &str)> {
        char_parser(&|c| c.is_whitespace() || "()".contains(c))(s)
    }

    fn whitespace(s: &str) -> Option<(char, &str)> {
        char_parser(&|c| !c.is_whitespace())(s)
    }

    pub fn symbol(s: &str) -> Option<(Expr, &str)> {
        let (parsed, tail) = parse_multiple(Box::new(symbol_character), s)?;
        Some((Symbol(parsed.into_iter().collect()), tail))
    }

    pub fn expr(s: &str) -> Option<(Expr, &str)> {
        let (parsed, tail) = symbol(s.trim()).or(sexpr(s.trim()))?;
        Some((parsed, tail))
    }

    pub fn expr_list(s: &str) -> Option<(Expr, &str)> {
        let (parsed, tail) = parse_multiple(
            Box::new(expr),
            s,
        )?;
        Some((List(parsed), tail))
    }

    pub fn sexpr(s: &str) -> Option<(Expr, &str)> {
        let mut count = 0;
        let mut buffer = String::new();

        if s.trim().chars().next()? != '(' {
            return None;
        }

        let paren_count = |s: &str| s.trim().chars().fold(0,
            |acc, c| acc + match c {
                '(' => 1,
                ')' => -1,
                _ => 0,
        }); 

        for c in s.trim().chars() {
            count += match c {
                '(' => 1,
                ')' => -1,
                _ => 0,
            };
            if count < 0 {
                return None;
            }
            buffer.push(c);
            if count == 0 {
                break;
            }
        }
        if count != 0 {
            return None;
        }
        let offset = buffer.len();
        Some((
            expr_list(&s[1..buffer.len()])?.0,
            &s[buffer.len()..],
        ))
    }
}

fn main() {
    println!("{:#?}", parser::expr(" a b ( a   b  c  )  ").unwrap())
}
